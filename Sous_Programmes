//
// Created by ethan on 08/11/2023.
//
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <conio.h>
#include <windows.h>
#include "time.h"
#include "Biblioth√®que_SousProgrammes.h"
#include <windows.h>
#include <stdbool.h>
#include <process.h>

#define LIGNES 10
#define COLONNES 20
#define cote 0xBA
#define plafondSol 0xCD
#define coinHG 0xC9
#define coinHD 0xBB
#define coinBG 0xC8
#define coinBD 0xBC
#define SNOOPY 0xF5
#define Entree 0x0D
#define ECHAP 0x1B
#define OISEAUX 0xA9
#define BLOC 0xFE


bool jeuEnCours = true;
bool jeuEnPause = false;
bool reglesInGame = false;
int scorePartie = 0;
int ViesRestantes = 3;

void creationMatrice(char matrice[LIGNES][COLONNES], int tempsRestant)
{
    system("cls");
    if (jeuEnCours)
    {
        printf("!! Attention !! Il ne vous reste que : %d secondes et %d vies restantes\n", tempsRestant,ViesRestantes);
    } else
    {
        Color(4,0);
        printf("Game Over : Appuyer sur echap pour revenir au menu principal\n");
        Color(3,0);
    }
    putchar(coinHG);
    for (int i = 0; i < COLONNES; i++)
    {
        putchar(plafondSol);
    }
    putchar(coinHD);
    putchar('\n');


    for (int i = 0; i < LIGNES; i++)
    {
        putchar(cote);
        for (int j = 0; j < COLONNES; j++)
        {
            putchar(matrice[i][j]);
        }
        putchar(cote);
        putchar('\n');
    }
    putchar(coinBG);
    for (int i = 0; i < COLONNES; i++)
    {
        putchar(plafondSol);
    }
    putchar(coinBD);
    putchar('\n');
}

void afficherHorloge(void* param) {
    int *secondes = (int *) param;
    while (_getch() != Entree);
    while (*secondes >= 0 && ViesRestantes > 0)
    {
        if (!jeuEnPause && !reglesInGame)
        {
            Sleep(1000);
            if (*secondes >= 0)
            {
                (*secondes)--;
            }
            if (*secondes < 0)
            {
                ViesRestantes--;
                if (ViesRestantes > 0)
                {
                    *secondes = 120;
                }
                else
                {
                    Color(4,0);
                    printf("\n\n\tGame Over : Appuyez sur echap pour revenir au menu principal");
                    Color(3,0);
                    jeuEnCours = false;
                    ViesRestantes = 3;
                }
            }
        }
    }
}

void afficherSNOOPY()
{
    ViesRestantes = 3;
    jeuEnCours = true;
    char matrice[LIGNES][COLONNES];
    int tempsRestant = 120;
    int PositionInitX = COLONNES / 2;
    int PositionInitY = LIGNES / 2;
    _beginthread(afficherHorloge, 0, &tempsRestant);
    int positionBalleX = rand() % (COLONNES - 2) + 1;
    int positionBalleY = rand() % (LIGNES - 2) + 1;
    int directionBalleX = 1;
    int directionBalleY = 1;

    int positionBlocSupriseX = rand() % (COLONNES - 2) + 1;
    int positionBlocSupriseY = rand() % (LIGNES - 2) + 1;

    int Oiseau1_X = 0;
    int Oiseau1_Y = 0;
    int Oiseau2_X = COLONNES - 1;
    int Oiseau2_Y = 0;
    int Oiseau3_X = 0;
    int Oiseau3_Y = LIGNES - 1;
    int Oiseau4_X = COLONNES - 1;
    int Oiseau4_Y = LIGNES - 1;

    bool oiseauxACapture[4] = { false, false, false, false };

    while (jeuEnCours) {
        for (int i = 0; i < LIGNES; i++)
        {
            for (int j = 0; j < COLONNES; j++)
            {
                matrice[i][j] = ' ';
            }
        }
        matrice[PositionInitY][PositionInitX] = SNOOPY;
        PoserBloc(matrice, 8,4);
        PoserBloc(matrice, 9,4);
        PoserBloc(matrice, 10,4);
        PoserBloc(matrice, 11,4);
        PoserBloc(matrice, 12,4);
        PoserBloc(matrice, 8,6);
        PoserBloc(matrice, 9,6);
        PoserBloc(matrice, 10,6);
        PoserBloc(matrice, 11,6);
        PoserBloc(matrice, 12,6);

        if (PositionInitX == positionBalleX && PositionInitY == positionBalleY)
        {
            ViesRestantes--;
            if (ViesRestantes > 0)
            {
                PositionInitX = COLONNES / 2;
                PositionInitY = LIGNES / 2;
            } else {
                Color(4,0);
                printf("\n\n\tGame Over : Appuyez sur echap pour revenir au menu principal");
                Color(3,0);
                jeuEnCours = false;
            }
        }
        if (!oiseauxACapture[0])
            matrice[Oiseau1_Y][Oiseau1_X] = OISEAUX;
        if (!oiseauxACapture[1])
            matrice[Oiseau2_Y][Oiseau2_X] = OISEAUX;
        if (!oiseauxACapture[2])
            matrice[Oiseau3_Y][Oiseau3_X] = OISEAUX;
        if (!oiseauxACapture[3])
            matrice[Oiseau4_Y][Oiseau4_X] = OISEAUX;

        positionBalleX += directionBalleX;
        positionBalleY += directionBalleY;

        if (positionBalleX <= 0 || positionBalleX >= COLONNES-1 )
        {
            directionBalleX = -directionBalleX;
        }
        if (positionBalleY <= 0 || positionBalleY >= LIGNES-1)
        {
            directionBalleY = -directionBalleY;
        }

        matrice[positionBalleY][positionBalleX] = 'O' ;

        creationMatrice(matrice, tempsRestant);

        printf("\n\n(Appuyer sur entree pour lancer le jeu et sur m pour la stopper)"
               "\n(Appuyer sur r pour acceder au regles du jeu)\n");

        int nombreOiseauxCaptures = 0;
        for (int i = 0; i < 4; i++) {
            if (oiseauxACapture[i]) {
                nombreOiseauxCaptures++;
            }
        }
        Color(6,0);
        printf("\nNombre d'oiseaux captures : ");
        Color(7,0);
        printf("%d", nombreOiseauxCaptures);
        Color(3,0);
        if (nombreOiseauxCaptures == 4)
        {
            Color(7,0);
            scorePartie = ScorePartie(tempsRestant);
            printf("\n\n\tVictoire ! Vous avez reussi a terminer le niveau et capture les oiseaux !");
            printf("\n\tScore de la partie : %d", scorePartie);
            Color(4,0);
            printf("\n\n\t(Appuyer sur echap pour revenir au Menu Principal)\n");
            Color(3,0);
            jeuEnPause = true;
            break;

        }
        if (_kbhit()) {
            char deplacement = _getch();

            matrice[PositionInitY][PositionInitX] = ' ';

            if (deplacement == 'q' && PositionInitX > 0)
            {
                PositionInitX--;
            }
            else if (deplacement == 'd' && PositionInitX < COLONNES - 1)
            {
                PositionInitX++;
            }
            else if (deplacement == 'z' && PositionInitY > 0)
            {
                PositionInitY--;
            }
            else if (deplacement == 's' && PositionInitY < LIGNES - 1)
            {
                PositionInitY++;
            }
            else if (deplacement == 'm')
            {
                MettreEnPause();
            }
            else if (deplacement == 'r')
            {
                VoirReglesInGame();
            }

            if (!oiseauxACapture[0] && PositionInitX == Oiseau1_X && PositionInitY == Oiseau1_Y)
            {
                oiseauxACapture[0] = true;
            }
            if (!oiseauxACapture[1] && PositionInitX == Oiseau2_X && PositionInitY == Oiseau2_Y)
            {
                oiseauxACapture[1] = true;
            }
            if (!oiseauxACapture[2] && PositionInitX == Oiseau3_X && PositionInitY == Oiseau3_Y)
            {
                oiseauxACapture[2] = true;
            }
            if (!oiseauxACapture[3] && PositionInitX == Oiseau4_X && PositionInitY == Oiseau4_Y)
            {
                oiseauxACapture[3] = true;
            }
        }
        Sleep(100);
    }
    ViesRestantes = 3;
    jeuEnCours = true;
    jeuEnPause = false;
    reglesInGame = false;
}

void MettreEnPause()
{
    printf("\nVous avez decide de mettre en pause le jeu ! Si vous voulez reprendre le jeu, cliquez sur 'm'...\n");
    jeuEnPause = true;
    while (_getch() != 'm')
    {
        if (!jeuEnPause)
        {
            Sleep(100);
        }
    }
    jeuEnPause = false;
}

void VoirReglesInGame()
{
    system("cls");
    reglesInGame = true;
    RegleDuJeu();
    while (_getch() != 'r');
    reglesInGame = false;
}

void RegleDuJeu()
{
    system("cls");
    printf("**Bienvenue dans notre tout nouveau jeu de La revanche de SNOOPY** \nVoici quelques informations importantes pour votre aventure :\n\n");
    printf("Objectif du Jeu:");
    Color(1,0);
    printf("\n\tAide Snoopy a attraper 4 oiseaux chacun cache dans un coin du niveau avant que le temps ne s'epuise.\n\n");
    Color(3,0);
    printf("Defis a surmonter :\n\n");
    printf("La Balle Rebondissante: ");
    Color(1,0);
    printf(" Une balle rebondit de maniere incontrolable dans le niveau pour t'embeter. Evite-la et reste en securite !(attention elle traverse les murs)\n\n");
    Color(3,0);
    printf("Les blocs : ");
    Color(1,0);
    printf("Tu devras pousser ou casser des blocs pour atteindre les oiseaux. C'est un jeu de strategie !\n\n");
    Color(3,0);
    printf("Gagne la Partie:");
    Color(1,0);
    printf("\nAttrape les 4 oiseaux dans le temps imparti et montre a Snoopy que tu es le meilleur ami de tous les temps !\n");

    Color(4,0);
    printf("\n\n\n(Appuyer sur echap pour revenir au menu principal)");
    Color(3,0);
}

void RevenirMenuPrincipale()
{
    while (1)
    {
        char btn = getche();
        if ((int)btn == ECHAP)
        {
            break;
        }
    }
    system("cls");
}

int ScorePartie(int tempsRestant)
{
    return tempsRestant * 100;
}

void ScoreMenu ()
{
    Color(7,0);
    printf("\n\n\tScore de la Partie en Cours : %d\n", scorePartie);
    Color(4,0);
    printf("\n(Appuyer sur echap pour revenir au Menu Principal)\n");
}

void PoserBloc(char matrice[LIGNES][COLONNES], int x, int y)
{
    if (x >= 0 && x < COLONNES && y >= 0 && y < LIGNES)
    {
    matrice[y][x] = BLOC;
    }
}

void Color(int couleurDuTexte,int couleurDeFond)
{
HANDLE H=GetStdHandle(STD_OUTPUT_HANDLE);
SetConsoleTextAttribute(H,couleurDeFond*16+couleurDuTexte);
}

void centrerTexte(int largeurTexte)
{
    int largeurConsole = 80;  // Ajustez cette valeur selon la largeur de votre console
    int espaces = (largeurConsole - largeurTexte) / 2;
    for (int i = 0; i < espaces; i++) {
        printf(" ");
    }
}

void encadrerTitre(int largeurTexte)
{
    for (int i = 0; i < largeurTexte + 4; i++) {
        putchar(plafondSol);
    }
    printf("\n ");
}

void afficherBlocSurprise(){
    int seed = 111;
    srand((unsigned int)&seed);
    int MIN = 0;
    int MAX = 1000;
    int nb_alea = MIN + rand() % (MAX - MIN + 1);



    if (nb_alea == 666) {
        printf("Pas de chance, vous etes tombe sur la malediction de la balle et elle vous a tuee instantanement\n");
    } else if (nb_alea == 777) {
        printf("Wow tous les oiseaux ont accourus vers vous. Vous avez gagne\n");
    } else if (666 < nb_alea && nb_alea < 777) {
        printf("Dommage, il n'y avait rien.\n");
    } else if (0 <= nb_alea && nb_alea < 200) {
        printf("La balle est gelee pendant 5 secondes.\n");
    } else if (200 <= nb_alea && nb_alea < 400) {
        printf("La balle s'est dedoublee!!\n");
    } else if (400 <= nb_alea && nb_alea < 600) {
        printf("Vous avez gagne une vie.\n");
    } else if ((600 <= nb_alea && nb_alea < 666) || (777 < nb_alea && nb_alea < 800)) {
        printf("Vous etes invincible pendant 5 secondes.\n");
    } else if (800 <= nb_alea && nb_alea <= 1000) {
        printf("Vous avez perdu une vie.\n");
    }
    return 0;
}

